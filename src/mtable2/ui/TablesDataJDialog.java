package mtable2.ui;

import java.awt.Component;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import mtable2.control.IDataControl;
import mtable2.model.TableData;
import mtable2.tools.TableDataFilter;

/**
 *
 * @author raitis
 */
public class TablesDataJDialog extends javax.swing.JDialog implements TableModelListener,IFilterJDialog {

    public static final String DATEFMT = "dd/MM/yyyy";
    private static final String CHANGE=" ***";
    private final static String FILTEROFF="Filter: OFF";
    private List<String> catList;
    private boolean DEBUG = true;
    private final IDataControl dataControl;
    private  String titleText;
    private List<TableData> origData;
    private TableDataFilter filter;
    
    /**
     * Creates new form TablesDataJDialog
     */
    public TablesDataJDialog(java.awt.Frame parent, boolean modal, IDataControl dataControl,String tableName) {
        super(parent, modal);
        if(tableName==null || tableName.isEmpty()) throw new RuntimeException("TableName != NULL!");
        initComponents();
        this.dataControl = dataControl;
        this.titleText= "Data for "+tableName;
        getListAndUpdateView();
        
        //changesForUpdate(false);
        
        selectTableRow(jTable1.getModel().getRowCount()-1);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLblSum = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();
        jFilterStatus = new javax.swing.JLabel();
        btnFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Data");

        jTable1.setModel(getTableDataModel());
        jTable1.setName("TDTable"); // NOI18N
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("SUM=");

        jLblSum.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLblSum.setForeground(new java.awt.Color(255, 0, 0));
        jLblSum.setText("0.0");

        btnAdd.setText("Add");
        btnAdd.setName("TDAdd"); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setName("TDDel"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReport.setText("Report");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        jFilterStatus.setText("Filter: OFF");

        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(119, 119, 119)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                                .addComponent(btnReport))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLblSum)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jFilterStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFilter)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFilterStatus)
                    .addComponent(btnFilter))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLblSum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnReport))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        /*List<TableData> mdata= getDataFromTableModelAsList();
        TableData ndata = new TableData(new Date(), "newCat", 0.0, "");
        mdata.add(ndata);*/
        TableData ndata = new TableData(new Date(), "newCat", 0.0, "");
        
         
        if(dataControl!=null){
            try {
                dataControl.addItem(ndata);
                List<TableData> mdata = dataControl.getItems();
                updateTableModelView(mdata);
               //select the new added row
               selectTableRow(mdata.size()-1);
                
            } catch (Exception ex) {
                Logger.getLogger(TablesDataJDialog.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
       
        
    }//GEN-LAST:event_btnAddActionPerformed

      
    
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       int idx = jTable1.getSelectedRow();
        List<TableData> rows = getDataFromTableModelAsList();
        if (idx < 0 || rows ==null) {
            return;
        }
        //long Id = rows.get(idx).getId(); //get tables Id 
        int ok = JOptionPane.showConfirmDialog(this, "Delete? :" + rows.get(idx).toString(), "Confirm", JOptionPane.YES_NO_OPTION);
        System.out.println("swingbinding.TableDataBindingJDialog.jBtnDeleteActionPerformed():" + ok);
        if (ok == 0) { //OK
            
                //deleteFromTableRow(idx);
                //tables.remove(idx);
                // Update remote data control
                if (dataControl != null) {
                    try {
                        dataControl.delItem(idx);
                        getListAndUpdateView();
                    } catch (Exception ex) {
                        Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        if(dataControl!=null){
            List<TableData> data = dataControl.getItems();
            ReportJDialog repoDlg = new ReportJDialog(null, true, titleText, data);
            repoDlg.setVisible(true);
        }
    }//GEN-LAST:event_btnReportActionPerformed

    private TableDataFilter getFilter() {
        if (dataControl != null) {
            origData = dataControl.getItems();
        }
        if (this.filter == null) {

            this.filter = new TableDataFilter(null, null, null, null, origData);
        }
        return filter;
    }

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        
        FilterJDialog filterDlg = new FilterJDialog(null, true, getFilter(), this);
        
        filterDlg.setVisible(true);
    }//GEN-LAST:event_btnFilterActionPerformed

    @Override
    public void doFilter() {
        try {
            List<TableData> newData = filter.filter(origData);
            updateTableModelView(newData);
            jFilterStatus.setText(filter.statusStr());
            enableModifyControls(false);
        } catch (Exception ex) {
            Logger.getLogger(TablesDataJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void filterOFF(){
        updateTableModelView(origData);
        origData = null;
        filter=null;
        jFilterStatus.setText(FILTEROFF);
        enableModifyControls(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablesDataJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablesDataJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablesDataJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablesDataJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TablesDataJDialog dialog = new TablesDataJDialog(new javax.swing.JFrame(), true, null,"Test");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                List<TableData> lst = dialog.getDummyList();
                dialog.updateTableModelView(lst);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnReport;
    private javax.swing.JLabel jFilterStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLblSum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void enableModifyControls(boolean b) {
       btnAdd.setEnabled(b);
       btnDelete.setEnabled(b);
       //btnUpdate.setEnabled(b);
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        System.out.println("mtable2.ui.TablesDataJDialog.tableChanged()"+e.getFirstRow()+":"+e.getColumn());
        if(e.getFirstRow()!=e.getLastRow()) throw new RuntimeException("Multi Selection not supported!");
         DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        //System.out.println(String.format("Selected:%s, RowNum: %s",jTable1.getSelectedRow(),e.getFirstRow()));
         System.out.println("Row:"+model.getDataVector().get(e.getFirstRow()));
         //Make amount always 0.0 by default
         if(e.getColumn()==3){
            Double v = (Double)model.getValueAt(e.getFirstRow(), e.getColumn());
            if(v==null){
              model.setValueAt(0, e.getFirstRow(), e.getColumn());
            }
         }
         if(dataControl!=null){
            try {
                dataControl.editItem(jTable1.getSelectedRow(), 
                           getRowDataFromTableModel(jTable1.getSelectedRow()));
            } catch (Exception ex) {
                Logger.getLogger(TablesDataJDialog.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            List<TableData> mdata = dataControl.getItems();
            updateTableModelView(mdata);
             //updateSUM(getDataFromTableModelAsList());
         }
         
        //System.out.println("Cell:" +model.getValueAt(e.getFirstRow(), e.getColumn()));
         
        
          //changesForUpdate(true);
    }

    /*****
    private void changesForUpdate(boolean update){
    
        if(update){
        btnUpdate.setEnabled(true);
            setTitle(titleText+CHANGE);
            btnFilter.setEnabled(false);
        }else{
          btnUpdate.setEnabled(false);
            setTitle(titleText);
            btnFilter.setEnabled(true);
        }
    }
    *****/
    
    private void getListAndUpdateView() {
        try {
            if (dataControl == null) {
                if (DEBUG) {
                    List<TableData> data = getDummyList();
                    updateTableModelView(data);

                }
                return;
            }
            List<TableData> data = this.dataControl.getItems();
            updateTableModelView(data);

        } catch (Exception ex) {
            Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private List<TableData> getDataFromTableModelAsList() {
     
           List<TableData> lst = new ArrayList<>();
           for(int i= 0 ; i<jTable1.getModel().getRowCount();i++){
               TableData table = new TableData();
                
                 table.setId((long) jTable1.getModel().getValueAt(i, 0));
                 table.setCdate((Date) jTable1.getModel().getValueAt(i, 1));
                table.setCat((String) jTable1.getModel().getValueAt(i, 2)); 
                table.setAmount((Double) jTable1.getModel().getValueAt(i, 3));
                table.setNote((String) jTable1.getModel().getValueAt(i, 4));
            lst.add(table);
           }
           return lst;
    }
    private TableData getRowDataFromTableModel(int rowNum) {
     
        if(jTable1.getModel().getRowCount()==0) return null;
        
               TableData row = new TableData();
                
                 row.setId((long) jTable1.getModel().getValueAt(rowNum, 0));
                 row.setCdate((Date) jTable1.getModel().getValueAt(rowNum, 1));
                row.setCat((String) jTable1.getModel().getValueAt(rowNum, 2)); 
                row.setAmount((Double) jTable1.getModel().getValueAt(rowNum, 3));
                row.setNote((String) jTable1.getModel().getValueAt(rowNum, 4));
           return row;
    }
    private TableModel getTableDataModel() {
        return new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Date", "Category", "Amount", "Note"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Long.class, java.util.Date.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
               if(column == 0) return false;
                return super.isCellEditable(row, column); 
            }
            
        };
    }

    private void updateTableModelView(List<TableData> lst) {
        //get new fresh model
        jTable1.setModel(getTableDataModel());

        setDefaultTableCellEditors();
        jTable1.getColumnModel().getColumn(2).setCellEditor(getMyCatCellEditor());
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer(){
            private DecimalFormat formater;
           
            {
              //formater = new DecimalFormat("#.##");
                formater = new DecimalFormat("0.00");
              //formater.setMinimumFractionDigits(2);
            }

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
              if(value instanceof Double )   {
                value = formater.format(value);
              }
              return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
            
        });
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //populate table
        for (TableData el : lst) {
            Object[] obj = getObjectRow(el);
            model.addRow(obj);
        }
        jTable1.getModel().addTableModelListener(this);
        updateSUM(lst);
    }

    private void updateSUM(List<TableData> lst) {
        DecimalFormat df = new DecimalFormat("#.##");
        double sum = 0;
        for (TableData row : lst) {
            sum = sum + row.getAmount();
        }
        jLblSum.setText(df.format(sum));
    }

    private void setDefaultTableCellEditors() {

        jTable1.setDefaultEditor(Date.class, getMyDateEditor());

    }

    private TableCellEditor getMyDateEditor() {
        JTextField textField = new JTextField();
        // textField.setLocale(Locale.ENGLISH);
        jTable1.setRowHeight(25);
        //JLabel lfield = new JLabel();
        //TableCellEditor defEdit = jTable1.getDefaultEditor(Date.class);

        return new DefaultCellEditor(textField) {
            private InputVerifier verifier;

            {
                verifier = getDateVerifier();
                getComponent().setInputVerifier(verifier);
            }

            @Override
            public JTextField getComponent() {
                return (JTextField) super.getComponent(); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {

                JTextField editor = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column); //To change body of generated methods, choose Tools | Templates.

                Date cvalue = (Date) table.getModel().getValueAt(row, column);
                // table.setRowHeight(30);
                //Date dd= new Date(s);
                SimpleDateFormat sf = new SimpleDateFormat(DATEFMT);
                editor.setText(sf.format(cvalue));
                System.out.println(".getTableCellEditorComponent(): " + editor.getText());
                return editor;
            }

            @Override
            public Object getCellEditorValue() {
                String value = (String) super.getCellEditorValue();
                SimpleDateFormat sf = new SimpleDateFormat(DATEFMT);
                Date dd = null;
                try {
                    dd = sf.parse(value);
                } catch (ParseException ex) {
                    Logger.getLogger(TablesDataJDialog.class.getName()).log(Level.SEVERE, null, ex);
                    return null;
                }
                return dd;
            }

            @Override
            public boolean stopCellEditing() {
                if (verifier != null && !verifier.shouldYieldFocus(getComponent())) {
                    return false;
                }
                return super.stopCellEditing();
            }

        };
    }

    private InputVerifier getDateVerifier() {
        return new InputVerifier() {
            SimpleDateFormat sf = new SimpleDateFormat(DATEFMT);

            @Override
            public boolean verify(JComponent input) {

                JTextField field = (JTextField) input;
                try {
                    Date result = sf.parse(field.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(TablesDataJDialog.class.getName()).log(Level.SEVERE, null, ex);
                    return false;
                }
                return true;
            }

            @Override
            public boolean shouldYieldFocus(JComponent input) {
                boolean valid = verify(input);
                if (!valid) {
                    JOptionPane.showMessageDialog(null, "Invalid Date! Format: " + DATEFMT);
                }
                return valid;
            }

        };
    }

    private TableCellEditor getMyCatCellEditor() {

        // textField.setLocale(Locale.ENGLISH);
        //jTable1.setRowHeight(25);
        //JLabel lfield = new JLabel();
        //TableCellEditor defEdit = jTable1.getDefaultEditor(Date.class);
        return new DefaultCellEditor(new JTextField()) {
            private InputVerifier verifier;

            {
                verifier = getCatVerifier();
                ((JTextField) getComponent()).setInputVerifier(verifier);
            }

            @Override
            public boolean stopCellEditing() {
                if (verifier != null && !verifier.shouldYieldFocus(((JTextField) getComponent()))) {
                    return false;
                }
                return super.stopCellEditing();
            }

        };
    }

    private InputVerifier getCatVerifier() {
        return new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                JTextField field = (JTextField) input;
                return !field.getText().isEmpty();

            }
        };
    }
    //----------model objects methods -------

    private void addToTableModel(List<TableData> data) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        for (TableData el : data) {
            Object[] obj = getObjectRow(el);
            model.addRow(obj);
        }
    }

    private void addToTableRow(TableData row) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        Object[] obj = getObjectRow(row);
        model.addRow(obj);

    }

    private void deleteFromTableRow(int idx) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(idx);
    }

    private Object[] getObjectRow(TableData el) {
        Object[] obj = new Object[5];
        obj[0] = el.getId();
        obj[1] = el.getCdate();
        obj[2] = el.getCat();
        obj[3] = el.getAmount();
        obj[4] = el.getNote();
        return obj;
    }

    //----------------------------------------
    //For Debug -------------------------------//
    /**
     * For debug
     *
     * @return
     */
    private List<TableData> getDummyList() {
        List<TableData> ndata = new ArrayList<>();
        ndata.add(new TableData(new Date(), "Table1Cat1", 10.0, "Note_1"));
        ndata.add(new TableData(new Date(), "Table1Cat2", 11.0, "Note_2"));
        ndata.add(new TableData(new Date(), "Table1Cat3", 12.0, "Note_3"));
        return ndata;
    }
/////

    /**
     * Select table's row by index 
     * @param rowIdx row index to be selected
     */
    private void selectTableRow(int rowIdx) {
    jTable1.changeSelection(rowIdx, 0, false, false);    
    }

    
    
}
