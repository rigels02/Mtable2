
package mtable2.ui;

import java.awt.Component;
import java.awt.TextField;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import mtable2.control.DataControl;
import mtable2.control.IDataControl;
import mtable2.control.ITableControl;
import mtable2.impoexpo.CSVGenericExportImport;
import mtable2.impoexpo.ExportImportJSON;

import mtable2.impoexpo.IExportImport;

import mtable2.impoexpo.OldExportImport;
import mtable2.io.FileIOImpl;
import mtable2.io.FilePersistenceManager;
import mtable2.model.MTable;
import mtable2.model.TableData;
import mtable2.model.TableInfo;

/**
 *
 * @author raitis
 */
public class TablesList extends javax.swing.JFrame implements TableModelListener, IToolsDialog {

    public final static String Version="1.51";
    
    public static final String DATEFMT = "dd/MM/yyyy";
    private List<TableInfo> tables;
    private boolean DEBUG = true;

    private ITableControl dataControl;

    /**
     * Creates new form TablesList
     *
     * @param control table data control
     */
    public TablesList(ITableControl control) {
        dataControl = control;
        tables = new ArrayList<>();
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnRows = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnTools = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tables");

        jTable1.setModel(getTableInfoModel());
        jTable1.setName("TTable"); // NOI18N
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getColumnModel().getColumn(1).setCellEditor(getTableNameCellEditor());
        jScrollPane1.setViewportView(jTable1);

        btnRows.setText("View Data");
        btnRows.setName("TView"); // NOI18N
        btnRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRowsActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.setName("TDel"); // NOI18N
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.setName("TNew"); // NOI18N
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnTools.setText("Tools");
        btnTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 180, Short.MAX_VALUE)
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDel)
                        .addGap(95, 95, 95)
                        .addComponent(btnRows)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTools)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTools)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRows)
                    .addComponent(btnDel)
                    .addComponent(btnNew))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed

        MTable ntable = new MTable();

        if (dataControl != null) {
            try {
                dataControl.create("newName", ntable);
                tables = dataControl.getTableInfoLst();
                updateTableModelView(tables);
            } catch (Exception ex) {
                Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnNewActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        int idx = jTable1.getSelectedRow();

        if (idx < 0) {
            return;
        }
        long Id = tables.get(idx).getId(); //get tables Id 
        int ok = JOptionPane.showConfirmDialog(this, "Delete Table? :" + tables.get(idx).formated(), "Confirm", JOptionPane.YES_NO_OPTION);
        System.out.println("swingbinding.TableDataBindingJDialog.jBtnDeleteActionPerformed():" + ok);
        if (ok == 0) { //OK
            if (tables != null) {
                //deleteFromTableRow(idx);
                //tables.remove(idx);
                // Update remote data control
                if (dataControl != null) {
                    try {
                        dataControl.delete(Id);
                        getListAndUpdateView();
                    } catch (Exception ex) {
                        Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

    }//GEN-LAST:event_btnDelActionPerformed

    private void btnRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRowsActionPerformed
        String selectedTableName = dataControl.getSelectedTableName();
        if (selectedTableName == null) {
            return;
        }
        TablesDataJDialog dataDialog = new TablesDataJDialog(this, true,
                (IDataControl) dataControl,
                selectedTableName);
        
        dataDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                       
                        getListAndUpdateView();
                    }
                });
        //String title= dataControl.getSelectedTableName();
        //dataDialog.setTitle("Data for "+dataControl.getSelectedTableName());
        dataDialog.setVisible(true);
    }//GEN-LAST:event_btnRowsActionPerformed

    private void btnToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolsActionPerformed
        ToolsJDialog toolsJDialog = new ToolsJDialog(this, true, this);
        toolsJDialog.setVisible(true);
    }//GEN-LAST:event_btnToolsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablesList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablesList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablesList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablesList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FileIOImpl<MTable> io = null;
                try {
                    io = new FileIOImpl<>();
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                }
                //io.deleteAll();
                FilePersistenceManager<MTable> pm = new FilePersistenceManager<>(io);
                DataControl ctrl = null;
                try {
                    ctrl = new DataControl(pm);
                } catch (Exception ex) {
                    Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                }
                TablesList tv = new TablesList(ctrl);
                tv.setVisible(true);
                tv.getListAndUpdateView();

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRows;
    private javax.swing.JButton btnTools;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

///////////////////////////////////////////////////////////////////
    private TableModel getTableInfoModel() {
        return new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Name", "ModDate", "Selected"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Long.class, java.lang.String.class, java.util.Date.class, java.lang.Boolean.class
            };

            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 0 || column == 2) {
                    return false;
                }
                if (column == 1) {
                    return true;
                }
                if (!(boolean) getValueAt(row, 3) && column == 3) {
                    return true;
                }
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
    }

    public void getListAndUpdateView() {
        try {
            if (dataControl == null) {
                if (DEBUG) {
                    tables = getDummyList();
                    updateTableModelView(tables);

                }
                return;
            }
            tables = this.dataControl.getTableInfoLst();
            updateTableModelView(tables);

        } catch (Exception ex) {
            Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private class DateRenderer extends DefaultTableCellRenderer{

        private final SimpleDateFormat sdf;

        public DateRenderer() {
            this.sdf= new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        }

        @Override
        protected void setValue(Object value) {
            if(value!=null){
                value= sdf.format((Date)value);
            }
            super.setValue(value); 
        }
    
        
    }

    private void updateTableModelView(List<TableInfo> lst) {
        //get new fresh model
        jTable1.setModel(getTableInfoModel());
        //setMyDateCellEditor();
        jTable1.getColumnModel().getColumn(1).setCellEditor(getTableNameCellEditor());
        jTable1.getColumnModel().getColumn(2).setCellRenderer(new DateRenderer());
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //populate table
        for (TableInfo el : lst) {
            Object[] obj = getObjectRow(el);
            model.addRow(obj);
        }
        jTable1.getModel().addTableModelListener(this);
        //To disable/ enable btnDel use SelectionListener
        /* btnDel.setEnabled(false);
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
        if(jTable1.getSelectedRow()> -1){
        btnDel.setEnabled(true);
        }else{
        btnDel.setEnabled(false);
        }
        }
        });*/
    }

    private List<TableInfo> getDummyList() {
        tables = new ArrayList<>();
        tables.add(new TableInfo(1, "Table_1", new Date()));
        tables.add(new TableInfo(2, "Table_2", new Date()));
        tables.add(new TableInfo(3, "Table_3", new Date()));
        return tables;
    }

    private void addToTableModel(List<TableInfo> tables) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        for (TableInfo el : tables) {
            Object[] obj = getObjectRow(el);
            model.addRow(obj);
        }
    }

    private void addToTableRow(TableInfo row) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        Object[] obj = getObjectRow(row);
        model.addRow(obj);

    }

    private void deleteFromTableRow(int idx) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(idx);
    }

    private Object[] getObjectRow(TableInfo el) {
        Object[] obj = new Object[4];
        obj[0] = el.getId();
        obj[1] = el.getName();
        obj[2] = el.getModTime();
        obj[3] = el.isSelected();
        return obj;
    }

    private long getTableIdFromRow(int idx) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        return (long) model.getValueAt(idx, 0);
    }

    TableCellEditor getTableNameCellEditor() {

        jTable1.setRowHeight(25);

        return new DefaultCellEditor(new JTextField()) {
            private InputVerifier verifier;

            {
                verifier = TablesList.this.getNameVerifier();
                ((JTextField) getComponent()).setInputVerifier(verifier);
            }

            @Override
            public boolean stopCellEditing() {
                if (verifier != null && !verifier.shouldYieldFocus(((JTextField) getComponent()))) {
                    return false;
                }
                return super.stopCellEditing();
            }

        };
    }

    InputVerifier getNameVerifier() {
        return new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                JTextField field = (JTextField) input;
                return !field.getText().isEmpty();

            }
        };
    }

    private List<TableInfo> getDataFromTableModelAsList() {

        List<TableInfo> lst = new ArrayList<>();
        for (int i = 0; i < jTable1.getModel().getRowCount(); i++) {
            TableInfo table = new TableInfo();

            table.setId((long) jTable1.getModel().getValueAt(i, 0));
            table.setName((String) jTable1.getModel().getValueAt(i, 1));
            table.setModTime((Date) jTable1.getModel().getValueAt(i, 2));
            table.setSelected((boolean) jTable1.getModel().getValueAt(i, 3));
            lst.add(table);
        }
        return lst;
    }

    @Override
    public void tableChanged(TableModelEvent e) {

        System.out.println("swingbinding.TableInfoJDialog.tableChanged():"
                + e.getFirstRow() + ":" + e.getLastRow() + ":" + e.getColumn());
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        if (dataControl != null) {

            if (e.getColumn() == 3) {
                if ((boolean) model.getValueAt(e.getFirstRow(), 3)) {
                    try {
                        dataControl.loadTableAndSelect((long) model.getValueAt(e.getFirstRow(), 0));
                        tables = dataControl.getTableInfoLst();
                        updateTableModelView(tables);
                    } catch (Exception ex) {
                        Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    model.setValueAt(true, e.getFirstRow(), e.getColumn());
                }
            } else if (e.getColumn() == 1) {
                try {
                    if ((boolean) model.getValueAt(e.getFirstRow(), 3)) {
                        dataControl.renameSelectedTable((String) model.getValueAt(e.getFirstRow(), 1));
                    } else {
                        dataControl.renameTableByid(
                                (long) model.getValueAt(e.getFirstRow(), 0),
                                (String) model.getValueAt(e.getFirstRow(), 1)
                        );
                    }
                } catch (Exception ex) {
                    Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    //-----------TEST --------------
    public static void test3Tables() throws IOException, ClassNotFoundException, Exception {

        FileIOImpl<MTable> io = new FileIOImpl<>();
        io.deleteAll();
        FilePersistenceManager<MTable> pm = new FilePersistenceManager<>(io);
        DataControl ctrl = new DataControl(pm);
        ctrl.create("Table_1", new MTable());
        TableData tdata = new TableData(new Date(), "Table_1Cat1", 10.0, "Note_1");
        ctrl.addItem(tdata);
        tdata = new TableData(new Date(), "Table_1Cat2", 20.0, "Note_2");
        ctrl.addItem(tdata);
        tdata = new TableData(new Date(), "Table_1Cat3", 30.0, "Note_3");
        ctrl.addItem(tdata);

        int Id = ctrl.getSelectedTableIdx();
        assertTrue(Id == 0);
        assertTrue(ctrl.getTableInfoLst().size() == 1);
        assertTrue(ctrl.getItems().get(2).toString().equals(tdata.toString()));
        //----Table_2
        ctrl.create("Table_2", new MTable());
        TableData tdata1 = new TableData(new Date(), "Table_2Cat1", 10.0, "Note_21");
        ctrl.addItem(tdata1);
        tdata1 = new TableData(new Date(), "Table_2Cat2", 20.0, "Note_21");
        ctrl.addItem(tdata1);
        tdata1 = new TableData(new Date(), "Table_2Cat3", 30.0, "Note_21");
        ctrl.addItem(tdata1);

        Id = ctrl.getSelectedTableIdx();
        assertTrue(Id == 1);
        assertTrue(ctrl.getTableInfoLst().size() == 2);
        assertTrue(ctrl.getItems().get(2).toString().equals(tdata1.toString()));

        //----Table_3
        ctrl.create("Table_3", new MTable());
        TableData tdata2 = new TableData(new Date(), "Table_3Cat1", 10.0, "Note_31");
        ctrl.addItem(tdata2);
        tdata2 = new TableData(new Date(), "Table_3Cat2", 20.0, "Note_31");
        ctrl.addItem(tdata2);
        tdata2 = new TableData(new Date(), "Table_3Cat3", 30.0, "Note_31");
        ctrl.addItem(tdata2);
        Id = ctrl.getSelectedTableIdx();
        assertTrue(Id == 2);
        assertTrue(ctrl.getTableInfoLst().size() == 3);
        assertTrue(ctrl.getItems().get(2).toString().equals(tdata2.toString()));

    }

    private static void assertTrue(boolean ok) {
        if (!ok) {
            throw new RuntimeException("Assert Error!");
        }
    }

    @Override
    public void makeOldExport(String filePath) {
        if (filePath == null || filePath.isEmpty()) {
            return;
        }
        OldExportImport expo = new OldExportImport();

        makeExport(expo,filePath);
    }

    @Override
    public void makeOldImport(String filePath) {
        if (filePath == null || filePath.isEmpty()) {
            return;
        }
        OldExportImport impo = new OldExportImport();
        makeImport(impo, filePath);
        
    }

    @Override
    public void makeJsonExport(String filePath) {
        if (filePath == null || filePath.isEmpty()) {
            return;
        }
        //JsonExportImport expo = new JsonExportImport();
        ExportImportJSON expo = new ExportImportJSON();
        makeExport(expo,filePath);
        
    }

    @Override
    public void makeJsonImport(String filePath) {
     if (filePath == null || filePath.isEmpty()) {
            return;
        }
        //JsonExportImport impo = new JsonExportImport();
        ExportImportJSON impo = new ExportImportJSON();
        makeImport(impo,filePath);    
    }

     @Override
    public void makeCSVMTableExport(String filePath, List<MTable> selectedTables,String delimiter) {
        if (filePath == null || filePath.isEmpty()) {
            return;
        }
        //CSVMTableExportImport expo= new CSVMTableExportImport();
        CSVGenericExportImport<MTable> expo = new CSVGenericExportImport<>(MTable.class,delimiter);
        
        try {
            expo.exportData(filePath, selectedTables);
        } catch (Exception ex) {
            Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(this, "Export completed!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }
    
    @Override
    public void makeCSVMTableImport(String filePath, String delimiter) {
    if (filePath == null || filePath.isEmpty()) {
            return;
        }
        CSVGenericExportImport<MTable> impo = new CSVGenericExportImport<>(MTable.class , delimiter);
        
        makeImport(impo,filePath);      
    }
    
    private void makeExport(IExportImport expo,String filePath) {
    DataControl ctrl = (DataControl) dataControl;
        ctrl.setExpImp(expo);
        try {
            ctrl.exportData(filePath);
            JOptionPane.showMessageDialog(this, "Data export completed!");
        } catch (Exception ex) {
            Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }

    private void makeImport(IExportImport impo, String filePath) {
    DataControl ctrl = (DataControl) dataControl;
        ctrl.setExpImp(impo);
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure?\n"
                + "All existing data will be rewriten!",
                "Confirm!", JOptionPane.OK_CANCEL_OPTION);
        if (confirm == 2) {
            return;
        }
        try {

            ctrl.importData(filePath);
            JOptionPane.showMessageDialog(this, "Data Import completed!");
            getListAndUpdateView();
        } catch (Exception ex) {
            Logger.getLogger(TablesList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }

    @Override
    public ITableControl getDataControlInterface() {
      return dataControl;
    }

    @Override
    public void tcpReceivingCompletedUpdateListView() {
            getListAndUpdateView();
    }

    

   
}
